openapi: 3.0.0

info: # Información general sobre la API
  title: HolidaysApp API Rest
  version: 1.0.0
  description: API Rest for HolidaysApp
servers: # URLs base del servidor
  - url: http://localhost:8080
    description: Generated server url
tags: # Opcional: para agrupar endpoints
  - name: Organizations
    description: An API CRUD to manage organizations
  - name: Roles
    description: An API CRUD to manage roles
  - name: Projects
    description: An API CRUD to manage projects
  - name: Departments
    description: An API CRUD to manage departments
  - name: Employees
    description: An API CRUD to manage employees
  - name: Users
    description: An API CRUD to manage users
  - name: Holidays
    description: An API CRUD to manage holidays
paths: # Todos los endpoints de la API
  /api-rest/organizations:
    get:
      tags:
        - Organizations
      summary: Get all organizations (optionally filtered by name)
      description: Get all organizations or filter by name using query parameter
      operationId: getAllOrganizations
      parameters:
        - name: name
          in: query
          description: Optional name to filter organizations
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationDTO'
        '400':
          description: Wrong Request – invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 400
                message: invalid parameters

        '401':
          description: Not authorized – invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 401
                message: No valid token provided

        '403':
          description: Denied – no permission to access the resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 403
                message: You do not have permission to access this resource

        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 404
                message: The Organization was not found

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 500
                message: Unexpected error occurred
    post:
      tags:
        - Organizations
      summary: Create a new organization
      description: Creates a new organization and returns the created resource
      operationId: createOrganization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationCreateDTO'
      responses:
        '201':
          description: Organization created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDTO'
        '400':
          description: Wrong Request – invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 400
                message: invalid input data

        '401':
          description: Not authorized – invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 401
                message: No valid token provided

        '403':
          description: Denied – no permission to access the resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 403
                message: You do not have permission to access this resource

        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 404
                message: The Organization was not found

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 500
                message: Unexpected error occurred
    put:
      tags:
        - Organizations
      summary: Update an existing organization
      description: Updates an organization by its ID, which must be included in the request body
      operationId: updateOrganization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationDTO'
      responses:
        '200':
          description: Organization updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDTO'
        '400':
          description: Wrong Request – invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 400
                message: invalid input data
        '401':
          description: Not authorized – invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 401
                message: No valid token provided

        '403':
          description: Denied – no permission to access the resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 403
                message: You do not have permission to access this resource

        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 404
                message: The Organization was not found

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 500
                message: Unexpected error occurred

  /api-rest/organizations/{organizationId}:
    get:
      tags:
        - Organizations
      summary: Get Organization by ID
      description: Get a Organization of Organizations APIs by ID
      operationId: getOrganizationById
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDTO'
        '400':
          description: Wrong Request – invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 400
                message: invalid input data
        '401':
          description: Not authorized – invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 401
                message: No valid token provided

        '403':
          description: Denied – no permission to access the resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 403
                message: You do not have permission to access this resource

        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 404
                message: The Organization was not found

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 500
                message: Unexpected error occurred
    delete:
      tags:
        - Organizations
      summary: Delete an organization
      description: Deletes an organization by its ID
      operationId: deleteOrganizationById
      parameters:
        - name: organizationId
          in: path
          required: true
          description: ID of the organization to delete
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDTO'
        '400':
          description: Wrong Request – invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 400
                message: invalid input data
        '401':
          description: Not authorized – invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 401
                message: No valid token provided

        '403':
          description: Denied – no permission to access the resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 403
                message: You do not have permission to access this resource

        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 404
                message: The Organization was not found

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 500
                message: Unexpected error occurred
  /api-rest/roles:
    get:
      tags:
        - Roles
      summary: Get all roles (optionally filtered by name)
      description: Get all roles or filter by name using query parameter
      operationId: getAllRoles
      parameters:
        - name: name
          in: query
          description: Optional name to filter roles
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleDTO'
        '400':
          description: Wrong Request – invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 400
                message: invalid input data
        '401':
          description: Not authorized – invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 401
                message: No valid token provided

        '403':
          description: Denied – no permission to access the resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 403
                message: You do not have permission to access this resource

        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 404
                message: The Role was not found

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 500
                message: Unexpected error occurred
  /api-rest/projects:
    get:
      tags:
        - Projects
      summary: Get all projects (optionally filtered by name)
      description: Get all projects or filter by name using query parameter
      operationId: getAllProjects
      parameters:
        - name: name
          in: query
          description: Optional name to filter projects
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectDTO'
        '400':
          description: Wrong Request – invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 400
                message: invalid input data
        '401':
          description: Not authorized – invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 401
                message: No valid token provided

        '403':
          description: Denied – no permission to access the resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 403
                message: You do not have permission to access this resource

        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 404
                message: The Project was not found

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 500
                message: Unexpected error occurred
  /api-rest/departments:
    get:
      tags:
        - Departments
      summary: Get all departments (optionally filtered by name)
      description: Get all departments or filter by name using query parameter
      operationId: getAllDepartments
      parameters:
        - name: name
          in: query
          description: Optional name to filter departments
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DepartmentDTO'
        '400':
          description: Wrong Request – invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 400
                message: invalid input data
        '401':
          description: Not authorized – invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 401
                message: No valid token provided

        '403':
          description: Denied – no permission to access the resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 403
                message: You do not have permission to access this resource

        '404':
          description: Department not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 404
                message: The Department was not found

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 500
                message: Unexpected error occurred
  /api-rest/employees:
    get:
      tags:
        - Employees
      summary: Get all Employees (optionally filtered by name)
      description: Get all employees or filter by name using query parameter
      operationId: getAllEmployees
      parameters:
        - name: name
          in: query
          description: Optional name to filter employees
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmployeeDTO'
        '400':
          description: Wrong Request – invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 400
                message: invalid input data
        '401':
          description: Not authorized – invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 401
                message: No valid token provided

        '403':
          description: Denied – no permission to access the resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 403
                message: You do not have permission to access this resource

        '404':
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 404
                message: The Employee was not found

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 500
                message: Unexpected error occurred
  /api-rest/users:
    get:
      tags:
        - Users
      summary: Get all Users (optionally filtered by name or last name)
      description: Get all users or filter by name or last name using query parameter
      operationId: getAllUsers
      parameters:
        - name: username
          in: query
          description: Optional username to filter users
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
        '400':
          description: Wrong Request – invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 400
                message: invalid input data
        '401':
          description: Not authorized – invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 401
                message: No valid token provided

        '403':
          description: Denied – no permission to access the resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 403
                message: You do not have permission to access this resource

        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 404
                message: The User was not found

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 500
                message: Unexpected error occurred
    put:
      tags:
        - Users
      summary: Update an existing User By Id
      description: Updates an User by its ID, which must be included in the request body
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Wrong Request – invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 400
                message: invalid input data
        '401':
          description: Not authorized – invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 401
                message: No valid token provided

        '403':
          description: Denied – no permission to access the resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 403
                message: You do not have permission to access this resource

        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 404
                message: The User was not found

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 500
                message: Unexpected error occurred
  /api-rest/users/login:
    post:
      tags:
        - Users
      summary: Login with the User's username or email and password
      description: Login with the User's username and password using a request body
      operationId: getUserByUsernameOrEmailAndPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Wrong Request – invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 400
                message: invalid input data
        '401':
          description: Not authorized – invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 401
                message: No valid token provided

        '403':
          description: Denied – no permission to access the resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 403
                message: You do not have permission to access this resource

        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 404
                message: The User was not found

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 500
                message: Unexpected error occurred
  /api-rest/users/register:
    post:
      tags:
        - Users
      summary: Register with the User's username, password and repeated password
      description: Register with the User's username and password using a request body
      operationId: registerByUsernameEmailAndPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Wrong Request – invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 400
                message: invalid input data
        '401':
          description: Not authorized – invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 401
                message: No valid token provided

        '403':
          description: Denied – no permission to access the resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 403
                message: You do not have permission to access this resource

        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 404
                message: The User was not found

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 500
                message: Unexpected error occurred
  /api-rest/users/{userId}:
    get:
      tags:
        - Users
      summary: Get an User By ID
      description: Get an User by its ID which is included in the path
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the User to get
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Wrong Request – invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 400
                message: invalid input data
        '401':
          description: Not authorized – invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 401
                message: No valid token provided

        '403':
          description: Denied – no permission to access the resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 403
                message: You do not have permission to access this resource

        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 404
                message: The User was not found

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 500
                message: Unexpected error occurred
  /api-rest/holidays:
    get:
      tags:
        - Holidays
      summary: Get all Holidays (optionally filtered by UserId)
      description: Get all holidays or filter by userId using query parameter
      operationId: getAllHolidays
      parameters:
        - name: userId
          in: query
          description: Optional userId to filter users
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HolidayDTO'
        '400':
          description: Wrong Request – invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 400
                message: invalid input data
        '401':
          description: Not authorized – invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 401
                message: No valid token provided

        '403':
          description: Denied – no permission to access the resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 403
                message: You do not have permission to access this resource

        '404':
          description: Holiday not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 404
                message: The Holiday was not found

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 500
                message: Unexpected error occurred
    post:
      tags:
        - Holidays
      summary: Add a holiday for a user
      description: Add a holiday for a user
      operationId: addHoliday
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HolidayRequestDTO'
      responses:
        '201':
          description: Holiday created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HolidayDTO'
        '400':
          description: Wrong Request – invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 400
                message: invalid input data

        '401':
          description: Not authorized – invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 401
                message: No valid token provided

        '403':
          description: Denied – no permission to access the resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 403
                message: You do not have permission to access this resource

        '404':
          description: Holiday not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 404
                message: The Holiday was not found

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 500
                message: Unexpected error occurred
    put:
      tags:
        - Holidays
      summary: Update an existing Holiday
      description: Updates an Holiday by its ID, which must be included in the request body
      operationId: updateHoliday
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HolidayDTO'
      responses:
        '200':
          description: Holiday updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HolidayDTO'
        '400':
          description: Wrong Request – invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 400
                message: invalid input data
        '401':
          description: Not authorized – invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 401
                message: No valid token provided

        '403':
          description: Denied – no permission to access the resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 403
                message: You do not have permission to access this resource

        '404':
          description: Holiday not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 404
                message: The Holiday was not found

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 500
                message: Unexpected error occurred
  /api-rest/holidays/{holidayId}:
    get:
      tags:
        - Holidays
      summary: Get an Holiday By ID
      description: Get an Holiday by its ID which is included in the path
      operationId: getHolidayById
      parameters:
        - name: holidayId
          in: path
          required: true
          description: ID of the Holiday to delete
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HolidayDTO'
        '400':
          description: Wrong Request – invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 400
                message: invalid input data
        '401':
          description: Not authorized – invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 401
                message: No valid token provided

        '403':
          description: Denied – no permission to access the resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 403
                message: You do not have permission to access this resource

        '404':
          description: Holiday not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 404
                message: The Holiday was not found

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 500
                message: Unexpected error occurred
    delete:
      tags:
        - Holidays
      summary: Delete an Holiday
      description: Deletes an Holiday by its ID which is included in the path
      operationId: deleteHolidayById
      parameters:
        - name: holidayId
          in: path
          required: true
          description: ID of the Holiday to delete
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HolidayDTO'
        '400':
          description: Wrong Request – invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 400
                message: invalid input data
        '401':
          description: Not authorized – invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 401
                message: No valid token provided

        '403':
          description: Denied – no permission to access the resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 403
                message: You do not have permission to access this resource

        '404':
          description: Holiday not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 404
                message: The Holiday was not found

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-05-20T19:00:00Z'
                status: 500
                message: Unexpected error occurred

components:
  schemas:
    OrganizationDTO:
      description: This is the Organization model
      type: object
      required:
        - name
      properties:
        id:
          type: integer
        name:
          type: string
    OrganizationCreateDTO:
      description: This is the Organization model to create
      type: object
      required:
        - name
      properties:
        name:
          type: string
          x-field-extra-annotation: "@NotBlank\n@Size(min=3, max=20)"
          minLength: 3
          maxLength: 20
    RoleDTO:
      description: This is the Role model
      type: object
      properties:
        id:
          type: integer
          #format: int32
        name:
          type: string
    ProjectDTO:
      description: This is the Project model
      type: object
      properties:
        id:
          type: integer
          #format: int32
        name:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date
        expectedEndDate:
          type: string
          format: date
        realEndDate:
          type: string
          format: date
        projectState:
          type: string
        projectType:
          type: string
    DepartmentDTO:
      description: This is the Department model
      type: object
      properties:
        id:
          type: integer
          #format: int32
        organization:
          $ref: '#/components/schemas/OrganizationDTO'
          #format: int32
        name:
          type: string
        businessUnit:
          type: string
        division:
          type: string
        costCenter:
          type: string
        location:
          type: string
        timeZone:
          type: string
    EmployeeDTO:
      description: This is the Employee model
      type: object
      properties:
        personId:
          type: integer
          #format: int32
        dept:
          $ref: '#/components/schemas/DepartmentDTO'
          #format: int32
        project:
          $ref: '#/components/schemas/ProjectDTO'
          #format: int32
        user:
          $ref: '#/components/schemas/UserDTO'
          #format: int32
        nif:
          type: string
        birthday:
          type: string
          format: date
        country_of_birth:
          type: string
        birth_city:
          type: string
        personal_phone:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        title:
          type: string
        gender:
          type: string
        marital_status:
          type: string
        nationality:
          type: string
        second_nationality:
          type: string
        primary_residence:
          type: string
        personal_email:
          type: string
        secondary_email:
          type: string
        work_email:
          type: string
    UserDTO:
      description: This is the User model
      type: object
      properties:
        id:
          type: integer
        role:
          $ref: '#/components/schemas/RoleDTO'
        username:
          type: string
        email:
          type: string
        password:
          type: string
        enabled:
          type: boolean
    LoginRequest:
      description: This is the Login Request model
      type: object
      required:
        - usernameOrEmail
        - password
      properties:
        usernameOrEmail:
          type: string
          minLength: 3
          maxLength: 30
        password:
          type: string
          minLength: 8
          maxLength: 30
          pattern: '^(?=.*[A-Z])(?=.*[^a-zA-Z0-9]).*$'
          description: >
            Debe contener al menos una letra mayúscula y un carácter especial
    RegisterRequest:
      description: This is the Register Request model
      type: object
      required:
        - username
        - email
        - password
        - repeatPassword
      properties:
        username:
          type: string
          x-field-extra-annotation: "@NotBlank\n@Size(min=3, max=30)"
          minLength: 3
          maxLength: 30
        email:
          type: string
          x-field-extra-annotation: "@NotBlank\n@Size(min=8, max=30)\n@Email"
          format: email
          minLength: 8
          maxLength: 30
        password:
          type: string
          x-field-extra-annotation: |
            @NotBlank
            @Size(min=8, max=30)
            @Pattern(regexp="^(?=.*[A-Z])(?=.*[^a-zA-Z0-9]).*$", message = "Debe contener al menos una letra mayúscula y un carácter especial")
          minLength: 8
          maxLength: 30
          pattern: '^(?=.*[A-Z])(?=.*[^a-zA-Z0-9]).*$'
          description: >
            Debe contener al menos una letra mayúscula y un carácter especial
        repeatPassword:
          type: string
          x-field-extra-annotation: |
            @NotBlank
            @Size(min=8, max=30)
            @Pattern(regexp="^(?=.*[A-Z])(?=.*[^a-zA-Z0-9]).*$", message = "Debe contener al menos una letra mayúscula y un carácter especial")
          minLength: 8
          maxLength: 30
          pattern: '^(?=.*[A-Z])(?=.*[^a-zA-Z0-9]).*$'
          description: >
            Debe contener al menos una letra mayúscula y un carácter especial
        role:
          $ref: '#/components/schemas/RoleDTO'
    HolidayDTO:
      type: object
      description: This is the Holiday model
      required:
        - holidayId
        - user
        - holidayStartDate
        - holidayEndDate
        - vacationType
        - vacationState
        - createdAt
        - createdBy
      properties:
        holidayId:
          type: integer
        user:
          $ref: '#/components/schemas/UserDTO'
        reviewedByAdmin:
          $ref: '#/components/schemas/UserDTO'
        reviewDate:
          type: string
          format: date
        reviewComment:
          type: string
        holidayStartDate:
          type: string
          format: date
        holidayEndDate:
          type: string
          format: date
        vacationType:
          type: string
        vacationState:
          type: string
        createdAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          $ref: '#/components/schemas/UserDTO'
        updatedBy:
          $ref: '#/components/schemas/UserDTO'
        deletedBy:
          $ref: '#/components/schemas/UserDTO'
        isDeleted:
          type: boolean
    HolidayRequestDTO:
        type: object
        description: This is the Holiday Request model to add a new holiday
        required:
          - userId
          - holidayStartDate
          - holidayEndDate
          - vacationType
        properties:
          userId:
            type: integer
            x-field-extra-annotation: |
              @NotNull
          holidayStartDate:
            type: string
            x-field-extra-annotation: |
              @NotNull
              @FutureOrPresent
            format: date
          holidayEndDate:
            type: string
            x-field-extra-annotation: |
              @NotNull
              @FutureOrPresent
            format: date
          vacationType:
            x-field-extra-annotation: |
              @NotNull
              @Size(min=3, max=20)
            type: string
    ErrorResponse:
      description: Standard error model for API responses
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        message:
          type: string